
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#define maxpatients 100

struct Hospitals{
    char hospitalName[100];
    char area[100];
    int totalbeds;
    int availablebeds;
    float hospReview[100];
    int reviewCount;
};

struct Patients {
    char patientName[100];
    int age;
    char gender[10];
    char diet[100];
    char prescription[100];
    int hospindex;
};


void savedata(struct Patients patients[], int noofpatients, struct Hospitals hospitals[], int hospitalcount){
    FILE *file=fopen("hospital_data.txt", "w");
    if (file==NULL){
        printf("Error saving data! File not found!");
        return;
    }
    fprintf(file,"NUMBER OF PATIENTS: %d\n", noofpatients);
    for (int i=0; i<noofpatients; i++){
        fprintf(file,"NAME: %s AGE: %d GENDER: %s DIET: %s PRESCRIPTION: %s HOSPINDEX: %d\n", patients[i].patientName, patients[i].age, patients[i].gender, patients[i].diet, patients[i].prescription, patients[i].hospindex);
    }
    fprintf(file,"NUMBER OF HOSPITALS: %d\n", hospitalcount);
    for (int i=0; i<hospitalcount; i++){
        fprintf(file,"NAME: %s AREA: %s TOTAL BEDS: %d AVAILABLE BEDS: %d\n", hospitals[i].hospitalName, hospitals[i].area, hospitals[i].totalbeds, hospitals[i].availablebeds);
        for(int j=0; j<hospitals[i].reviewCount; j++){
             fprintf(file, "REVIEWS: %.1f ", hospitals[i].hospReview[j]);
        }
        fprintf(file, "\n");
    }
    fclose(file);
    printf("Data saved successfully!");
}

void loadData (struct Patients patients[], int *noofpatients, struct Hospitals hospitals[], int *hospitalcount){
 FILE *file=fopen("hospital_data.txt", "r");
    if (file==NULL){
        printf("No saved data not found!");
        return;
    }
    fscanf(file, "%d", noofpatients);
    for (int i=0; i< *noofpatients; i++){
        fscanf(file, " %[^\n] %d %s %[^\n] %[^\n] %d", patients[i].patientName, &patients[i].age, patients[i].gender, patients[i].diet, patients[i].prescription, patients[i].hospindex);
    }
    fscanf(file, "%d", hospitalcount);
    for (int i=0; i< *hospitalcount; i++){
        fscanf(file, " %[^\n] %[^\n] %d %d", hospitals[i].hospitalName, hospitals[i].area, &hospitals[i].totalbeds, &hospitals[i].availablebeds);
        fscanf(file, "%f", &hospitals[i].reviewCount);
        for (int j=0; j<hospitals[i].reviewCount; j++){
            fscanf(file, "%f", &hospitals[i].hospReview[j]);
        }
    }
    fclose(file);
    printf("Data loaded successfully!\n");
}



void addpatient(struct Patients patients[], int *noofpatients, struct Hospitals hospitals[], int hospitalcount){
if (*noofpatients>maxpatients){
    printf("Patient list is full, cannot add more records!");
}
else {
    printf("Enter patient name: \n");
    scanf(" %[^\n]", patients[*noofpatients].patientName);
    printf("Enter patient's age: \n");
    scanf("%d", &patients[*noofpatients].age);
    printf("Enter gender: \n");
    scanf(" %[^\n]", patients[*noofpatients].gender);
    printf("Enter diet: \n");
    scanf(" %[^\n]", patients[*noofpatients].diet);
    printf("Enter prescription: \n");
    scanf(" %[^\n]", patients[*noofpatients].prescription);

    printf("Select hospital by Hospital's index:\n");
        for (int i = 0; i < hospitalcount; i++) {
            printf("%d. %s\n", i, hospitals[i].hospitalName);
        }
        scanf("%d", &patients[*noofpatients].hospindex);
        if (patients[*noofpatients].hospindex < 0 || patients[*noofpatients].hospindex >= hospitalcount) {
            printf("Invalid hospital index!\n");
            patients[*noofpatients].hospindex = -1;
        }

    (*noofpatients)++;
    printf("New record successfully added!\n");
    savedata(patients, *noofpatients, hospitals, hospitalcount);
}
}

void delpatient(struct Patients patients[], int *noofpatients,  struct Hospitals hospitals[], int hospitalcount){
  if (*noofpatients==0){
    printf("No records to delete!");
    return;
}
else {  
    char name[100];
    printf("Enter the name of the patient you want to delete: \n");
    scanf(" %[^\n]", name);
    int found=-1;
    for (int i=0; i<*noofpatients; i++){
        if (strcasecmp(patients[i].patientName, name)==0){
            found = i;
            break;
        }
    }
    if (found == -1){
    printf("No record found!\n");
    return;
    } 
    else {
        for (int i=found; i<*noofpatients-1; i++){
            patients[i]=patients[i+1];
        }
        (*noofpatients)--;
        printf("Patient record deleted!\n");
        savedata(patients, *noofpatients, hospitals, hospitalcount);
    }
}
}

void updatepatient(struct Patients patients[], int noofpatients, struct Hospitals hospitals[], int hospitalcount){
    char name[100];
    printf("Enter the name of the patient: ");
    scanf(" %[^\n]", name); 
    int found=0;
    for (int i =0; i<noofpatients; i++){
        if (strcasecmp(patients[i].patientName, name)==0){
            found=1;
             printf("Enter diet: \n");
             scanf(" %[^\n]", patients[i].diet);
             printf("Enter prescription: \n");
             scanf(" %[^\n]", patients[i].prescription);
            return;
        }
    }
    savedata(patients, noofpatients, hospitals, hospitalcount);
    if (found==0){
        printf("No record found!");
    }
}

void searchpatient(struct Patients patients[], int noofpatients, struct Hospitals hospitals[]){
    char name[100];
    printf("Enter the name of the patient: ");
    scanf(" %[^\n]", name); 
    int found=-1;
     for (int i =0; i<noofpatients; i++){
        if (strcasecmp(patients[i].patientName, name)==0){
            found=i;
            printf("Name: %s \nAge: %d\nGender: %s\n", patients[i].patientName, patients[i].age, patients[i].gender);
            printf("Diet: %s \nPresciption: %s\n", patients[i].diet, patients[i].prescription);
            if (patients[i].hospindex>=0){
                printf("Admitted to: %s\n", hospitals[patients[i].hospindex].hospitalName);
            }
            return;
}
}
if (found==-1){
    printf("No record found!");
}
}

void checkBeds(struct Hospitals hospitals[], int hospitalcount){
    for (int i=0; i<hospitalcount; i++){
        if (hospitals[i].availablebeds>0){
            printf("Name: %s\nArea: %s \nNumber of available beds: %d\n", hospitals[i].hospitalName, hospitals[i].area, hospitals[i].availablebeds);
        }
        printf("\n");
    }
}

void addreview(struct Hospitals hospitals[], int hospindex){
    float review;
    char suggestions[100];
    printf("Give review (1 to 5): \n");
    scanf("%f", &review);
    hospitals[hospindex].reviewCount++;
    if (review>5 || review<1){
        printf("Invalid review! Please enter a rating between 1 and 5.\n");
        return;
    }
    hospitals[hospindex].hospReview[hospitals[hospindex].reviewCount]=review;
    if (review<3){
        printf("How can we improve our service? Please leave suggestions.\n");
        scanf(" %[^\n]", suggestions);
    }
    else {
    printf("Thanks for your review!\n");
    }
}


float avgRating(float hospReview[], int reviewCount){
if (reviewCount == 0){
    return 0.0;
}
    float sum = 0;
    for (int i=0; i<reviewCount; i++){
        sum+=hospReview[i];
    }
    return sum/reviewCount;
}

void dispReview(struct Hospitals hospitals[], int hospindex){
    float avg=avgRating(hospitals[hospindex].hospReview, hospitals[hospindex].reviewCount);
    printf("Average rating for %s: %.1f \n", hospitals[hospindex].hospitalName, avg);
}




int main(){
    struct Patients patients[maxpatients]={
        {"Ahmed", 19, "Male", "Norvasc", "Avoid oily foods", 0},
        {"Haania", 17, "Female", "Panadol", "Stay hydrated", 1},
        {"Ali", 2, "Male", "Calpol", "Fluids", 2},
        {"Ms.Asiya", 34,"Female","Azomax", "Avoid cold beverages", 3}
    };
    struct Hospitals hospitals[5]={
        {"Hill Park Hospital", "PECHS", 50, 10, {4.2,3.3,1,5}, 4},
        {"City Hospital", "Saddar", 60, 45, {4.2,3,3,5}, 4},
        {"South City", "Clifton", 45, 35, {2.3,4,4,3.3,3.2,3.5},6},
        {"Ankelseria Hospital", "Saddar", 60, 23,{3.5,3.5,4.4,5,4.8}, 5},
        {"Memon Medical Center", "Johar", 80, 55,{4.3,3,3.4,4.4,3.8,4.9}, 6}
    };
    int noofpatients=4, hospitalcount=5, choice, hospindex;
    loadData(patients, &noofpatients, hospitals, &hospitalcount);
do {
printf("\nWelcome to ABC Hospital Managment System\n");
printf("1. Add a new patient record\n");
printf("2. Delete a record\n");
printf("3. Update patient's details\n");
printf("4. Search for a patient\n");
printf("5. Check bed availability\n");
printf("6. Add reviews\n");
printf("7. Display reviews\n");
printf("8. Save Data and Exit\n");
printf("9. Exit\n");
printf("Enter your option: \n");
scanf("%d", &choice);
switch (choice){
case 1:
addpatient(patients, &noofpatients, hospitals, hospitalcount);
break;
case 2:
delpatient(patients, &noofpatients, hospitals, hospitalcount);
break;
case 3:
updatepatient(patients, noofpatients, hospitals, hospitalcount);
break;
case 4:
searchpatient(patients, noofpatients, hospitals);
break;
case 5:
checkBeds(hospitals, hospitalcount);
break;
case 6:
printf("Enter the hopsital's index number (0 for Hill Park Hospital, 1 for City Hospital, 2 for South City Hospital, 3 for Ankelseria Hospital, 4 for Memon Medical Center): \n");
scanf("%d", &hospindex);
if (hospindex<0 || hospindex>=hospitalcount){
    printf("INVALID INDEX!");
}
else {
addreview(hospitals, hospindex);
}
break;
case 7:
printf("Enter the hopsital's index number (0 for Hill Park Hospital, 1 for City Hospital, 2 for South City Hospital, 3 for Ankelseria Hospital, 4 for Memon Medical Center): \n");
scanf("%d", &hospindex);
if (hospindex<0 || hospindex>=hospitalcount){
    printf("INVALID INDEX!");
}
else {
dispReview(hospitals, hospindex);
}
break;
case 8:
savedata(patients, noofpatients, hospitals, hospitalcount);
printf("Exiting.....");
choice=9;
break;
case 9:
printf("Exiting...\n");
return 0;
break;
default:
printf("Invalid option! Make sure to enter numbers between 1 to 9.\n");
}
}
while (choice!=9);
return 0;
}
